services:
  filebrowser:
    image: hurlenko/filebrowser
    user: "${PUID}:${PGID}"
    ports:
      - 8080:80
    volumes:
      - ${DATA}/..:/data
      - ${APPDATA}/filebrowser:/config
    environment:
      - FB_BASEURL=/filebrowser
    restart: unless-stopped
    
  gotify:
    image: gotify/server
    ports:
      - 5454:80
    environment:
      - GOTIFY_DEFAULTUSER_PASS=admin
      - TZ=${TZ}
    volumes:
      - ${APPDATA/gotify}:/app/data
    # to run gotify as a dedicated user:
    # sudo chown -R 1234:1234 ./gotify_data
    # user: "1234:1234"
    
  homeassistant:
    image: lscr.io/linuxserver/homeassistant:latest
    container_name: homeassistant
    network_mode: host
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${APPDATA}:/config
    ports:
      - 8123:8123 #optional
    devices:
    # - /path/to/device:/path/to/device #optional
    restart: unless-stopped

  navidrome:
    image: deluan/navidrome:latest
    user: 1000:1000 # should be owner of volumes
    ports:
      - 4533:4533
    restart: unless-stopped
    environment:
      # Optional: put your config options customization here. Examples:
      ND_SCANSCHEDULE: 1h
      ND_LOGLEVEL: info  
      ND_SESSIONTIMEOUT: 24h
      ND_BASEURL: ""
    volumes:
      - ${APPDATA}/navidrome:/data"
      - ${DATA}/Music/Regular Music:/music:ro

  netdata:
    image: netdata/netdata:stable
    container_name: netdata
    hostname: Enterprise # set to fqdn of host
    ports:
      - 19999:19999
    restart: unless-stopped
    cap_add:
      - SYS_PTRACE
    security_opt:
      - apparmor:unconfined
    volumes:
      - netdataconfig:/etc/netdata
      - netdatalib:/var/lib/netdata
      - netdatacache:/var/cache/netdata
      - /etc/passwd:/host/etc/passwd:ro
      - /etc/group:/host/etc/group:ro
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /etc/os-release:/host/etc/os-release:ro

volumes:
  netdataconfig:
  netdatalib:
  netdatacache:

  nginx-proxy-manager:
    image: 'jc21/nginx-proxy-manager:latest'
    restart: unless-stopped
    ports:
      # These ports are in format <host-port>:<container-port>
      - 80:80 # Public HTTP Port
      - 443:443 # Public HTTPS Port
      - 81:81 # Admin Web Port
      # Add any other Stream port you want to expose
      # - '21:21' # FTP

    # Uncomment the next line if you uncomment anything in the section
    # environment:
      # Uncomment this if you want to change the location of
      # the SQLite DB file within the container
      # DB_SQLITE_FILE: "/data/database.sqlite"

      # Uncomment this if IPv6 is not enabled on your host
      # DISABLE_IPV6: 'true'

    volumes:
      - ${APPDATA}/nginx-proxy/data:/data
      - ${APPDATA}/nginx-proxy/letsencrypt:/etc/letsencrypt
      - /etc/ssl:/etc/ssl

  organizr:
    image: linuxserver/organizr
    container_name: organizr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${APPDATA}/organizr:/config
    ports:
      - 100:80
    restart: unless-stopped---

  overseerr:
    image: sctx/overseerr:latest
    container_name: overseerr
    environment:
      - LOG_LEVEL=debug
      - TZ=${TZ}
    ports:
      - 5055:5055
    volumes:
      - ${APPDATA}/overseer:/app/config
    restart: unless-stopped---

  tautulli:
    image: lscr.io/linuxserver/tautulli:latest
    container_name: tautulli
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${APPDATA}/tautulli:/config
    ports:
      - 8181:8181
    restart: unless-stopped

    wrapperr:
        ports:
            - 8282:8282
        container_name: wrapperr
        image: ghcr.io/aunefyren/wrapperr:latest
        restart: unless-stopped
        volumes:
            - ${APPDATA}/wrapper:/app/config

  flaresolverr:
    # DockerHub mirror flaresolverr/flaresolverr:latest
    image: ghcr.io/flaresolverr/flaresolverr:latest
    container_name: flaresolverr
    environment:
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - LOG_HTML=${LOG_HTML:-false}
      - CAPTCHA_SOLVER=${CAPTCHA_SOLVER:-none}
      - TZ=${TZ}
    ports:
      - 8191:8191
    restart: unless-stopped 

  smokeping:
    image: lscr.io/linuxserver/smokeping:latest
    container_name: smokeping
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      #- MASTER_URL=http://<master-host-ip>:80/smokeping/ #optional
      #- SHARED_SECRET=password #optional
      #- CACHE_DIR=/tmp #optional
    volumes:
      - ${APPDATA}/smokeping/config:/config
      - ${APPDATA}/smokeping/data:/data
    ports:
      - 2222:80
    restart: unless-stopped
    
  librespeed:
    image: lscr.io/linuxserver/librespeed:latest
    container_name: librespeed
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ={TZ}
      - PASSWORD=rm7508216
      #- CUSTOM_RESULTS=false #optional
      #- DB_TYPE=sqlite #optional
      #- DB_NAME=DB_NAME #optional
      #- DB_HOSTNAME=DB_HOSTNAME #optional
      #- DB_USERNAME=DB_USERNAME #optional
      #- DB_PASSWORD=DB_PASSWORD #optional
      #- DB_PORT=DB_PORT #optional
      #- IPINFO_APIKEY=ACCESS_TOKEN #optional
    volumes:
      - ${APPDATA}/librespeed:/config
    ports:
      - 78:80
    restart: unless-stopped
    
  syncthing:
    image: lscr.io/linuxserver/syncthing:latest
    container_name: syncthing
    hostname: syncthing #optional
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${APPDATA}/syncthing:/config
      - ${DATA}:/data1
      #- /path/to/data2:/data2
    ports:
      - 8384:8384
      - 22000:22000/tcp
      - 22000:22000/udp
      - 21027:21027/udp
    restart: unless-stopped
 
  playlistSync:
    image: rnagabhyrava/plexplaylistsync:latest
    container_name: playlistsync
    # optional only if you chose WRITE_MISSING_AS_CSV=1 in env
    volumes:
      - ${DATA}/Music:/data
    environment:
      - PLEX_URL=10.0.0.10:32400
      - PLEX_TOKEN=cy9Hseb-_mYwzsuSDvB6
      - WRITE_MISSING_AS_CSV=1 # Default 0, 1 = writes missing tracks from each playlist to a csv
      - APPEND_SERVICE_SUFFIX=0 # Default 1, 1 = appends the service name to the playlist name
      - ADD_PLAYLIST_POSTER=1 # Default 1, 1 = add poster for each playlist
      - ADD_PLAYLIST_DESCRIPTION=1 # Default 1, 1 = add description for each playlist
      - APPEND_INSTEAD_OF_SYNC=0 # Default 0, 1 = Sync tracks, 0 = Append only
      - SECONDS_TO_WAIT=84000
      - SPOTIFY_CLIENT_ID=6c27b67bc3d048a98a34817495c7ad98
      - SPOTIFY_CLIENT_SECRET=84ff2c0102f74741a5c43f8f04fdba9e
      - SPOTIFY_USER_ID=22xuhoj5orno5ngbe65hfcjpy
      - DEEZER_USER_ID=<your spotify user id>
      - DEEZER_PLAYLIST_ID= #<deezer playlist ids space seperated>
    restart: unless-stopped
  
  photostructure:
    # You can run alpha, beta, or stable builds. See
    # <https://forum.photostructure.com/t/274> for details.
    image: photostructure/server:stable
    container_name: photostructure
    restart: unless-stopped
    stop_grace_period: 2m

    volumes:
      # This is where your PhotoStructure Library will be stored.
      # It must be readable, writable, and have sufficient free space.
      # If it is a remote volume, uncomment the PS_FORCE_LOCAL_DB_REPLICA
      # environment line below.

      - type: bind
        source: ${DATA}/Pictures # < CHANGE THIS LINE
        target: /ps/library

      # This must be fast, local disk with many gigabytes free.
      # PhotoStructure will use this directory for file caching
      # and for storing a temporary database replica when your
      # library is on a remote volume.

      - type: bind
        source: ${APPDATA}/photostructure/tmp
        target: /ps/tmp

      # This directory stores your "system settings"

      - type: bind
        source: ${APPDATA}/photostructure/config
        target: /ps/config

      # This directory stores PhotoStructure logfiles.

      - type: bind
        source: ${APPDATA}/photostructure/logs
        target: /ps/logs

      # Example additional directories to import into your library.
      # Add as many as you'd like, or remove one or both of these examples.

      # Set the target to /media/... or /mnt/...
      # (the name doesn't matter, as long as it is unique)


      # Here's another example directory to scan:
      # - type: bind
      #   source: /home/jamie/Pictures
      #   target: /var/home-jamie-pictures

    ports:
      - 1787:1787/tcp

    environment:
      # PhotoStructure has _tons_ of settings. See
      # <https://photostructure.com/faq/environment-variables/>

      # This tells PhotoStructure to only log errors, which is the default:
      # - "PS_LOG_LEVEL=error"
      
      # If PhotoStructure is refusing to spin up, uncomment these lines to see what's going on:
      # - "PS_LOG_LEVEL=info"
      # - "PS_LOG_STDOUT=true"
      
      # This is your local timezone. See <https://en.wikipedia.org/wiki/List_of_tz_database_time_zones>
      - "TZ=${TZ}" # < CHANGE THIS LINE
      
      # The userid to run PhotoStructure as:
      - "PUID=${PUID}" # < CHANGE THIS LINE or delete this line to run as root. See below for details.
      
      # The groupid to run PhotoStructure as:
      - "PGID=${PGID}" # < CHANGE THIS LINE or delete this line to run as root.


    labels:
      # See https://containrrr.dev/watchtower/container-selection/
      - "com.centurylinklabs.watchtower.enable=true"

#  watchtower:
#    image: containrrr/watchtower
#    volumes:
#     - /var/run/docker.sock:/var/run/docker.sock
#   # Check for updates every couple hours: (3h * 60m * 60s)
#   command: --interval 10800
#   environment:
#      - "WATCHTOWER_LABEL_ENABLE=true"